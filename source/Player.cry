import Math;
import Random;

const ROTATION_VELOCITY = TWO_PI * .003; // 1%
const ACCEL_RATE = 0.05;

enum Shapes {
	SQUARE,
	TRIANGLE,
	SHORT,
	TALL,
}

const CHANGE_COUNTER_START = FPS / 4;

class Player {
	
	field x;
	field y;
	field vx = 0.0;
	field vy = 0.0;
	
	field nextShape = Shapes.SQUARE;
	field currentShape = Shapes.SQUARE;
	field changeCounter = -1; // counts down. positive means it's changing.
	field changeProgress = 0.0;
	field changeLift = 0.0;
	field changeHeight = 1.0;
	
	field crashTimer = -1;
	
	field theta; // 0 is facing the positive y axis and goes clockiwse
	
	constructor(x, y, theta) {
		this.x = x + 0.0;
		this.y = y + 0.0;
		this.theta = theta + 0.0;
	}
	
	function update(accelPressed, brakePressed, goLeft, goRight, course, shapeChange) {
		// OMGHAX
		// switched FPS from 60 to 30 since JS can't keep up and most people will be playing
		// the JS version. Apply physics updates twice to keep math the same.
		for (i = 0; i < 2; ++i) {
			this.updateImpl(accelPressed, brakePressed, goLeft, goRight, course, shapeChange);
		}
	}
	
	function updateImpl(accelPressed, brakePressed, goLeft, goRight, course, shapeChange) {
		
		// trigger a shape change
		this.changeCounter--;
		if (shapeChange != null && this.changeCounter < 0 && this.currentShape != shapeChange) {
			this.nextShape = shapeChange;
			this.changeCounter = CHANGE_COUNTER_START;
		}
		
		// shape change in progress
		if (this.changeCounter > 0) {
		
			// halfway through, swap shape mode
			if (this.nextShape != null &&
				this.currentShape != this.nextShape &&
				this.changeCounter < CHANGE_COUNTER_START / 2) {
				
				this.currentShape = this.nextShape;
				this.nextShape = null;
			}
			// goes from 0 to 1 to 0.
			changeProgress = 1.0 - Math.abs(2.0 * this.changeCounter / CHANGE_COUNTER_START - 1);
			changeProgress = Math.ensureRange(changeProgress, 0, 1);
			this.changeLift = changeProgress * .2;
			this.changeHeight = changeProgress * .3 + 1;
			//print([changeProgress, changeLift, changeHeight]);
		} else {
			this.changeLift = 0.0;
			this.changeHeight = 1.0;
		}
		
		if (goLeft) {
			this.theta -= ROTATION_VELOCITY;
		} else if (goRight) {
			this.theta += ROTATION_VELOCITY;
		}
		
		v = 0;
		if (accelPressed) {
			v = .02;
		} else if (brakePressed) {
			this.vx *= .9;
			this.vy *= .9;
		}
		
		this.vx += Math.sin(this.theta) * v;
		this.vy += Math.cos(this.theta) * v;
		
		this.vx *= .96;
		this.vy *= .96;
		
		// remove some amount (conversionRatio) of the velocity vector and convert it into 
		// the direction the player is facing (i.e. "steering" instead of "sliding")
		conversionRatio = .5;
		vmag = (this.vx ** 2 + this.vy ** 2) ** .5; // velocity magnitude
		this.vx *= (1 - conversionRatio);
		this.vy *= (1 - conversionRatio);
		dmag = vmag * conversionRatio;
		dx = Math.sin(this.theta) * dmag;
		dy = Math.cos(this.theta) * dmag;
		
		this.vx += dx;
		this.vy += dy;
		
		newX = this.x + this.vx;
		newY = this.y + this.vy;
		
		if (course.isInBounds(newX, newY)) {
			this.x = newX;
			this.y = newY;
		} else {
			this.vx *= -.5;
			this.vy *= -.5;
		}
	}
	
	/*
		renderRow[1] -> location[x, y, z]
		renderRow[2] -> width
		renderRow[3] -> nullable image
	*/
	function renderUpdate(renderRow) {
	
		this.crashTimer--;
		pOffsetX = 0;
		pOffsetY = 0;
		if (this.crashTimer > 0) {
			pOffsetX = Random.randomFloat() * .08;
			pOffsetY = Random.randomFloat() * .08;
		}
		
		imgPath = null;
		switch (this.currentShape) {
			case Shapes.SQUARE: imgPath = 'sprites/square.png'; break;
			case Shapes.TRIANGLE: imgPath = 'sprites/triangle.png'; break;
			case Shapes.SHORT: imgPath = 'sprites/short.png'; break;
			case Shapes.TALL: imgPath = 'sprites/tall.png'; break;
		}
		img = ImageLibrary.get(imgPath);
		renderRow[3] = img;
		
		loc = renderRow[1];
		loc[0] = this.x + pOffsetX;
		loc[1] = this.y + pOffsetY;
		loc[2] = this.changeLift;
		
		renderRow[2] = .3; // seems about right.
		renderRow[2] *= this.changeHeight; // adjust for shape transition.
		
	}
}
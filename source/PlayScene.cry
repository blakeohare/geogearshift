class PlayScene : AbstractScene {
	
	field roadSegments = [
		[[-1.0, 0], [1.0, 0]],
		[[-1.0, 1], [1.0, 1]],
		[[1.0, 5], [3.0, 5]], // shifts to the right
	];
	
	field demoMode;
	field renderer;
	field player;
	field course;
	field timeLeft = 90.0;
	field previousFrameTime = Core.currentTime();
	
	constructor(demoMode) : base() {
		this.demoMode = demoMode;
		this.player = new Player(0.0, 0.5, 0.0);
		this.course = new Course('level1');
		this.renderer = new Renderer(this, demoMode);
	}
	
	function update(pressedKeys, pressedThisFrame) {
		
		oldPx = this.player.x;
		oldPy = this.player.y;
		
		// update timer.
		now = Core.currentTime();
		if (this.previousFrameTime != null) {
			this.timeLeft -= now - this.previousFrameTime;
		}
		this.previousFrameTime = now;
		
		pause = false;
		shapeChange = null;
		for (action : pressedThisFrame) {
			switch (action) {
				case Action.ENTER:
					pause = true;
					break;
					
				case Action.RECT: shapeChange = Shapes.SQUARE; break;
				case Action.TRI: shapeChange = Shapes.TRIANGLE; break;
				case Action.TALL: shapeChange = Shapes.TALL; break;
				case Action.SHORT: shapeChange = Shapes.SHORT; break;
			}
			
		}
		if (pause) {
			this.switchScene(new PauseScreen(this));
		}
		
		this.player.update(
			pressedKeys.get(Action.UP, false),
			pressedKeys.get(Action.DOWN, false),
			pressedKeys.get(Action.LEFT, false),
			pressedKeys.get(Action.RIGHT, false),
			this.course,
			shapeChange);
	
		
		progress = this.course.getProgress(this.player.x, this.player.y);
		progress = Math.floor(progress * 100);
		
		px = this.player.x;
		py = this.player.y;
		
		gateways = this.course.getGatewayObjects();
		for (i = gateways.length - 1; i >= 0; --i) {
			gateway = gateways[i];
			if (gateway.isNear(px, py)) {
				if (gateway.isCrossThrough(oldPx, oldPy, px, py)) {
					this.course.removeGateway(i);
					if (this.player.currentShape == gateway.type) {
						this.timeLeft += 5.0;
						JukeBox.playSound('correct');
					} else {
						JukeBox.playSound('wrong');
						this.player.crashTimer = FPS / 2;
					}
					break;
				}
			}
		}
	}
	
	function render(rc) {
		this.renderer.render(rc);
		
		if (!this.demoMode) {
			// HUD
			
			centis = Math.floor(this.timeLeft * 100);
			if (centis < 0) centis = 0;
			
			mins = centis / 6000;
			centis -= mins * 6000;
			seconds = centis / 100;
			centis -= seconds * 100;
			
			display = mins + ":" + (seconds < 10 ? '0' : '') + seconds + '.' + (centis < 10 ? '0' : '') + centis;
			
			timeleft = ImageLibrary.get('menus/timeleft.png');
			timeleft.draw(10, 10);
			TextRenderer.draw(display, 10, 17 + timeleft.height);
		}
	}
}

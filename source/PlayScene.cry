import Math;

const TIME_BONUS_HUD_COUNTER_MAX = FPS / 2;

class PlayScene : AbstractScene {
	
	field roadSegments = [
		[[-1.0, 0], [1.0, 0]],
		[[-1.0, 1], [1.0, 1]],
		[[1.0, 5], [3.0, 5]], // shifts to the right
	];
	
	field demoMode;
	field renderer;
	field player;
	field course;
	field timeLeft = 30.0;
	field previousFrameTime = Core.currentTime();
	field gateCount = 0;
	field timeBonus = 5.0;
	field timeBonusHudCounter = -1;
	field timeBonusHudDisplay = null;
	
	field timeSurvived = 0.0;
	
	constructor(demoMode, theme) : base() {
		this.demoMode = demoMode;
		this.player = new Player(0.0, 0.5, 0.0);
		this.course = new Course('level1');
		this.renderer = new Renderer(this, demoMode, theme);
	}
	
	function update(pressedKeys, pressedThisFrame) {
		
		oldPx = this.player.x;
		oldPy = this.player.y;
		
		// update timer.
		now = Core.currentTime();
		if (this.previousFrameTime != null) {
			diff = now - this.previousFrameTime;
			this.timeLeft -= diff;
			this.timeSurvived += diff;
		}
		this.previousFrameTime = now;
		
		if (!this.demoMode && this.timeLeft <= 0) {
			this.switchScene(new EndScreen(this));
		}
		
		pause = false;
		shapeChange = null;
		for (action : pressedThisFrame) {
			switch (action) {
				case Action.ENTER:
					pause = true;
					break;
					
				case Action.RECT: shapeChange = Shapes.SQUARE; break;
				case Action.TRI: shapeChange = Shapes.TRIANGLE; break;
				case Action.TALL: shapeChange = Shapes.TALL; break;
				case Action.SHORT: shapeChange = Shapes.SHORT; break;
			}
			
		}
		if (pause) {
			this.switchScene(new PauseScreen(this));
		}
		
		this.player.update(
			pressedKeys.get(Action.UP, false),
			pressedKeys.get(Action.DOWN, false),
			pressedKeys.get(Action.LEFT, false),
			pressedKeys.get(Action.RIGHT, false),
			this.course,
			shapeChange);
	
		
		progress = this.course.getProgress(this.player.x, this.player.y);
		progress = Math.floor(progress * 100);
		
		px = this.player.x;
		py = this.player.y;
		
		gateways = this.course.getGatewayObjects();
		for (i = gateways.length - 1; i >= 0; --i) {
			gateway = gateways[i];
			if (gateway.isNear(px, py)) {
				if (gateway.isCrossThrough(oldPx, oldPy, px, py)) {
					this.course.removeGateway(i);
					if (this.player.currentShape == gateway.type && gateway.goesThroughOpening(px, py)) {
						this.timeLeft += this.timeBonus;
						this.timeBonusHudCounter = TIME_BONUS_HUD_COUNTER_MAX;
						this.timeBonusHudDisplay = ('+' + (Math.floor(this.timeBonus * 100) / 100.0))[:5]; // :5 just in case some weird floating point issue on a platform.
						
						JukeBox.playSound('correct');
						this.gateCount++;
						this.timeBonus *= .97;
					} else {
						JukeBox.playSound('wrong');
						this.player.crashTimer = FPS / 2;
					}
					break;
				}
			}
		}
	}
	
	function render(rc) {
		this.renderer.render(rc);
		
		if (!this.demoMode) {
			// HUD
			
			timeLeft = Math.max(0, this.timeLeft);
			display = formatTime(timeLeft);
			
			timeleft = ImageLibrary.get('menus/timeleft.png');
			timeleft.draw(10, 10);
			TextRenderer.draw(display, 10, 17 + timeleft.height);
			
			if (this.timeBonusHudCounter > 0) {
				this.timeBonusHudCounter--;
				progress = 1.0 - 1.0 * this.timeBonusHudCounter / TIME_BONUS_HUD_COUNTER_MAX;
				yOffset = Math.floor(progress * -100);
				TextRenderer.draw(this.timeBonusHudDisplay, SCREEN_WIDTH / 2 - 20, SCREEN_HEIGHT / 3 + yOffset);
			}
		}
	}
}

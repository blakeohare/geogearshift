import Math;

// Find the cross product of two vectors: QR x ST
function crossProductSign(qx, qy, rx, ry, sx, sy, tx, ty) {
	cp = (rx - qx) * (ty - sy) - (tx - sx) * (ry - qy);
	if (cp < 0) return -1;
	if (cp > 0) return 1;
	return 0;
}

// find distance of P from the line AB
function pointDistanceFromLine(ax, ay, bx, by, px, py) {
	dx = bx - ax;
	if (dx == 0) {
		// vertical line at x = ax
		return Math.abs(ax - px);
	}
	
	dy = by - ay;
	if (dy == 0) {
		// horizontal line at y = ay
		return Math.abs(ay - py);
	}
	
	// y = m1 * x + b1
	m1 = 1.0 * dy / dx;
	b1 = ay - m1 * ax;
	
	// y = m2 * x + b2
	m2 = -1 / m1;
	b2 = py - m2 * px;
	
	// solve for x
	// y = m1 * x + b1 = m2 * x + b2
	// (m1 - m2) * x = b2 - b1
	// x = (b2 - b1) / (m1 - m2)
	ix = (b2 - b1) / (m1 - m2);
	// plug in to y = m2 * x + b2
	iy = m2 * ix + b2;
	
	// find distance between Ixy and Pxy
	return ((ix - px) ** 2 + (iy - py) ** 2) ** .5;
}

// points must be passed in order.
// clockwise or counter clockwise is fine.
// "Z" shaped order won't work.
function makeTrianglesForQuad(a, b, c, d, rgb) {
	triangles = [[a, b, c], [a, c, d]];
	
	output = [];
	for (triangle : triangles) {
		a = triangle[0];
		b = triangle[1];
		c = triangle[2];
		
		ax = a[0];
		ay = a[1];
		az = a[2];
		bx = b[0];
		by = b[1];
		bz = b[2];
		cx = c[0];
		cy = c[1];
		cz = c[2];
		
		avgX = (ax + bx + cx) / 3.0;
		avgY = (ay + by + cy) / 3.0;
		avgZ = (az + bz + cz) / 3.0;
		
		output.add([
			ObjectType.TRIANGLE,
			[avgX, avgY, avgZ, 1],
			[a, b, c],
			rgb.clone()
		]);
	}
	return output;
}

function formatTime(secondsFloat) {
	if (secondsFloat < 0) secondsFloat = 0;
	centis = Math.floor(secondsFloat * 100);
	
	mins = centis / 6000;
	centis -= mins * 6000;
	seconds = centis / 100;
	centis -= seconds * 100;
	
	return mins + ":" + (seconds < 10 ? '0' : '') + seconds + '.' + (centis < 10 ? '0' : '') + centis;
}
